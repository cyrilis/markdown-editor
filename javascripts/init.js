// Generated by CoffeeScript 1.7.1
(function() {
  var MarkdownEditor;

  MarkdownEditor = (function() {
    function MarkdownEditor(elem, options) {
      var imageId, k, self, v, _i, _j, _len, _len1, _ref;
      this.elem = elem;
      this.defaultOption = {
        mode: 'gfm',
        lineNumbers: false,
        theme: 'default',
        lineWrapping: true,
        tabSize: options.tabSize !== void 0 ? options.tabSize || 2 : void 0,
        indentUnit: options.tabSize !== void 0 ? options.tabSize || 2 : void 0,
        indentWithTabs: options.indentWithTabs === false ? false || true : void 0,
        lineNumbers: false,
        autofocus: options.autofocus === true ? true || false : void 0
      };
      options = options || {};
      for (v = _i = 0, _len = options.length; _i < _len; v = ++_i) {
        k = options[v];
        if (this.defaultOption[k] !== void 0) {
          options[k] = this.defaultOption[k];
        }
      }
      _ref = this.defaultOption;
      for (v = _j = 0, _len1 = _ref.length; _j < _len1; v = ++_j) {
        k = _ref[v];
        if (options[k] === void 0) {
          options[k] = this.defaultOption[k];
        }
      }
      this.options = options;
      this.cm = CodeMirror.fromTextArea(this.elem, this.options);
      if (window.marked) {
        this.uploadRenderer = new window.marked.Renderer();
        imageId = "image-" + btoa(Math.round(Math.random() * 1000000000));
        imageId = imageId.replace("=", "");
        this.uploadRenderer.image = function(href, title, text) {
          var doneClass, hasImage, out;
          hasImage = true;
          doneClass = "";
          if (href.length <= 9 && (href === "https://".substr(0, href.length) || href === "http://".substr(0, href.length))) {
            hasImage = false;
          }
          if (hasImage) {
            doneClass = " done";
          }
          out = '<div class="image-uploader"><figure><img src="' + href + '" alt="' + text + '"' + doneClass;
          if (title) {
            out += ' title="' + title + '"';
          }
          out += (this.options.xhtml != null ? '/>' : '>');
          out += '<div class="image-uploader-handler' + doneClass + '">' + '<div class="remove"><i class="icon-close"></i></div>' + '<input type="hidden" id=' + imageId + ' value=' + imageId + '/>' + '<div class="image-add-file">Click to Upload Image</div>' + '<div class="image-progress">' + '<div class="image-progress-inner"></div>' + '</div></div>';
          if (title) {
            out += "<figcaption>" + title + "</figcaption>";
          }
          out += "</figure></div>";
          return out;
        };
      }
      this.buildDom();
      this.cm.on("change", this.renderPreview.bind(this));
      this.bindClickDropdown();
      this.renderPreview();
      this.bindUpload();
      this.action_split();
      this.syncScroll();
      self = this;
      $(document).ready((function(_this) {
        return function() {
          return window.setTimeout(function() {
            self.cm.refresh();
            return console.log("Ready");
          }, 300);
        };
      })(this));
      this;
    }

    MarkdownEditor.prototype.buildDom = function() {
      var $htmlPreview, elemName, htmlTemplate, item, items, options, self, uploadForm, _fn, _i, _len;
      self = this;
      htmlTemplate = "<div class=\"note-editor panel panel-default\">\n    <div class=\"note-dropzone\">\n        <div class=\"note-dropzone-message\"></div>\n    </div>\n    <div class=\"note-toolbar panel-heading\">\n    </div>\n    <div class=\"note-editing-area\">\n        <div class=\"note-editable panel-body\" style=\"height: 500px;\"></div>\n    </div>\n    <div class=\"note-statusbar\">\n        <div class=\"note-resizebar\">\n            <div class=\"note-icon-bar\"></div>\n            <div class=\"note-icon-bar\"></div>\n            <div class=\"note-icon-bar\"></div>\n        </div>\n    </div>\n</div>";
      uploadForm = "<form class=\"image-uploader-form\" target=\"_blank\" hidden=\"hidden\">\n    <input name=\"image\" class=\"image-uploader-input\" type=\"file\"/>\n    <input type=\"hidden\" name=\"id\" value=\"\"/>\n</form>";
      $("body").append($(uploadForm));
      this.editorWrapper = $(htmlTemplate);
      items = this.toolbarItems();
      _fn = function(item) {
        var $catcher, $itemTemplate, action, onMovePicker, _ref;
        $itemTemplate = $(item.template);
        self.editorWrapper.find(".note-toolbar").append($itemTemplate);
        if ((_ref = item.name) !== "style" && _ref !== "table") {
          action = item.action;
          return $itemTemplate.find("button.btn.btn-default").eq(0).click(function() {
            return self["action_" + action]();
          });
        } else if (item.name === "style") {
          return $itemTemplate.find(".dropdown-menu > li > a").click(function(e) {
            e.preventDefault();
            action = $(this).data("value");
            return self["action_" + action]();
          });
        } else if (item.name === "table") {
          $catcher = $itemTemplate.find(".note-dimension-picker-mousecatcher");
          $catcher.on("mousemove", function(event) {
            return onMovePicker(event);
          }).parent().click(function() {
            return self["action_" + "table"]($catcher.attr("data-value"));
          });
          return onMovePicker = function(event) {
            var $dimensionDisplay, $highlighted, $picker, $unhighlighted, dim, posCatcher, posOffset;
            $picker = $(event.target.parentNode);
            $dimensionDisplay = $picker.next();
            $catcher = $picker.find('.note-dimension-picker-mousecatcher');
            $highlighted = $picker.find('.note-dimension-picker-highlighted');
            $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');
            posOffset = void 0;
            if (event.offsetX === void 0) {
              posCatcher = $(event.target).offset();
              posOffset = {
                x: event.pageX - posCatcher.left,
                y: event.pageY - posCatcher.top
              };
            } else {
              posOffset = {
                x: event.offsetX,
                y: event.offsetY
              };
            }
            dim = {
              c: Math.ceil(posOffset.x / 18) || 1,
              r: Math.ceil(posOffset.y / 18) || 1
            };
            $highlighted.css({
              width: dim.c + 'em',
              height: dim.r + 'em'
            });
            $catcher.attr('data-value', dim.c + 'x' + dim.r);
            if (3 < dim.c && dim.c < 10) {
              $unhighlighted.css({
                width: dim.c + 1 + 'em'
              });
            }
            if (3 < dim.r && dim.r < 10) {
              $unhighlighted.css({
                height: dim.r + 1 + 'em'
              });
            }
            return $dimensionDisplay.html(dim.c + ' x ' + dim.r);
          };
        }
      };
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        _fn(item);
      }
      $(this.cm.display.wrapper).after(this.editorWrapper);
      options = this.options;
      elemName = this.elem.name;
      $htmlPreview = $("<div class=\"content-preview\"></div>\n<textarea hidden class='html-value' name=\"" + (options.htmlName || (elemName + '-html')) + "\"/>");
      this.editorWrapper.find(".note-editing-area .note-editable").append(this.cm.display.wrapper).append($htmlPreview);
      return this.preview = this.editorWrapper.find(".content-preview");
    };

    MarkdownEditor.prototype.createIcon = function(name, action, icon, shortCut) {
      var template;
      template = "<div class=\"btn-group " + (name === 'fullscreen' ? 'note-fullscreen' : 'note-base') + "\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" title=\"\" data-event=\"" + action + "\" tabindex=\"-1\"\n        data-name=\"" + name + "\" data-original-title=\"" + shortCut + "\"><i class=\"" + icon + "\"></i></button>\n</div>";
      return {
        template: template,
        name: name,
        action: action
      };
    };

    MarkdownEditor.prototype.toolbarItems = function() {
      return [
        {
          name: "style",
          template: "<div class=\"note-style btn-group\">\n    <div class=\"btn-group\" data-name=\"style\">\n        <button type=\"button\" class=\"btn btn-default btn-sm dropdown-toggle\" data-toggle=\"dropdown\" title=\"\"\n                tabindex=\"-1\" data-original-title=\"Style\"><i class=\"icon-magic\"></i> <span\n                class=\"caret\"></span></button>\n        <ul class=\"dropdown-menu\">\n            <li><a data-event=\"formatBlock\" href=\"#\" data-value=\"h1\">Header 1</a></li>\n            <li><a data-event=\"formatBlock\" href=\"#\" data-value=\"h2\">Header 2</a></li>\n            <li><a data-event=\"formatBlock\" href=\"#\" data-value=\"h3\">Header 3</a></li>\n            <li><a data-event=\"formatBlock\" href=\"#\" data-value=\"h4\">Header 4</a></li>\n            <li><a data-event=\"formatBlock\" href=\"#\" data-value=\"h5\">Header 5</a></li>\n            <li><a data-event=\"formatBlock\" href=\"#\" data-value=\"h6\">Header 6</a></li>\n        </ul>\n    </div>\n</div>",
          action: "switchStyle"
        }, this.createIcon("bold", "bold", "icon-bold", "Bold (⌘+B)"), this.createIcon("italic", "italic", "icon-italic", "Italic (⌘+I)"), this.createIcon("strikethrough", "strikethrough", "icon-strikethrough", "Strike through"), this.createIcon("ul", "unorderedList", "icon-list-ul", "Unordered list (⌘+⇧+NUM7)"), this.createIcon("ol", "orderedList", "icon-list-ol", "Ordered list (⌘+⇧+NUM8)"), this.createIcon("code", "code", "icon-code", "Code (Ctrl+Alt+C)"), this.createIcon("quote", "quote", "icon-quote", "Quote (Ctrl+')"), this.createIcon("link", "link", "icon-link", "Create Link (Ctrl+K)"), this.createIcon("image", "image", "icon-image", "Insert Image (Ctrl+Alt+I)"), {
          template: "<div class=\"note-table btn-group\">\n    <div class=\"btn-group\" data-name=\"table\">\n        <button type=\"button\" class=\"btn btn-default btn-sm dropdown-toggle\" data-toggle=\"dropdown\" title=\"\"\n                tabindex=\"-1\" data-original-title=\"Table\"><i class=\"icon-table\"></i> <span\n                class=\"caret\"></span></button>\n        <ul class=\"dropdown-menu note-table\">\n            <div class=\"note-dimension-picker\">\n                <div class=\"note-dimension-picker-mousecatcher\" data-event=\"insertTable\" data-value=\"1x1\"\n                     style=\"width: 10em; height: 10em;\"></div>\n                <div class=\"note-dimension-picker-highlighted\"></div>\n                <div class=\"note-dimension-picker-unhighlighted\"></div>\n            </div>\n            <div class=\"note-dimension-display\"> 1 x 1</div>\n        </ul>\n    </div>\n</div>",
          action: "table",
          name: "table"
        }, this.createIcon("hr", "hr", "icon-minus", "Insert Horizontal Rule (⌘+ENTER)"), this.createIcon("split", "split", "icon-columns", "Split Preview and Markdown"), this.createIcon("preview", "preview", "icon-see", "Preview Markdown"), this.createIcon("fullscreen", "fullscreen", "icon-fullscreen", "Full Screen")
      ];
    };

    MarkdownEditor.prototype.bindClickDropdown = function() {
      this.editorWrapper.find('.btn[data-toggle="dropdown"]').click(function() {
        console.log("xxx");
        return $(this).parent().toggleClass("open");
      });
      this.editorWrapper.find(".dropdown-menu>li>a").click(function() {
        return $(this).parents(".dropdown-menu").parent().removeClass("open");
      });
      return this.editorWrapper.find(".note-dimension-picker").click(function() {
        return $(this).parents(".dropdown-menu").parent().removeClass("open");
      });
    };

    MarkdownEditor.prototype.action_fullscreen = function() {
      var $editable, $scrollbar, $toolbar, $window, isFullScreen, resize;
      isFullScreen = this.editorWrapper.find(".note-fullscreen .btn").eq(0).toggleClass("active").hasClass("active");
      this.editorWrapper.toggleClass("fullscreen", isFullScreen);
      this.cm.refresh();
      $window = $(window);
      $scrollbar = $("html, body");
      $toolbar = this.editorWrapper.find(".note-toolbar");
      $editable = this.editorWrapper.find(".note-editable");
      resize = function(size) {
        return $editable.css("height", size.h);
      };
      if (isFullScreen) {
        $editable.data("orgheight", $editable.css("height"));
        $window.on('resize', function() {
          return resize({
            h: $window.height() - $toolbar.outerHeight()
          });
        }).trigger("resize");
        return $scrollbar.css("overflow", "hidden");
      } else {
        $window.off("resize");
        resize({
          h: $editable.data("orgheight")
        });
        return $scrollbar.css("overflow", "visible");
      }
    };

    MarkdownEditor.prototype.getNthImageSelection = function(n, toReplace) {
      var cursor, editor, i, reg, text, _i;
      editor = this.cm;
      reg = /(!\[.*?\]\()([^'"]+?)?(['"][^'"]*['"])?\s*(\))/gi;
      cursor = editor.getSearchCursor(reg);
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        cursor.findNext();
      }
      if (!cursor.find()) {
        return null;
      }
      editor.setSelection(cursor.from(), cursor.to());
      text = editor.getSelection(cursor.from(), cursor.to());
      return text.replace(reg, function(whole, title, link, desc, last) {
        toReplace = (title || "") + (toReplace || "") + " " + (desc || "") + (last || "");
        return cursor.replace(toReplace);
      });
    };

    MarkdownEditor.prototype.bindUpload = function() {
      var $body, self;
      self = this;
      $body = $("body");
      $body.on("click", ".image-uploader-handler.done .remove", function() {
        var $imageUploaderHandler, n, path;
        $imageUploaderHandler = $(this).parents(".image-uploader-handler");
        $imageUploaderHandler.removeClass("done");
        path = "http://";
        $imageUploaderHandler.parents("figure").find("img").attr("src", path);
        $imageUploaderHandler.addClass("done");
        n = $(".image-uploader-handler").index($imageUploaderHandler);
        return self.getNthImageSelection(n, path);
      });
      return $body.on("click", ".image-uploader-handler", function() {
        var $imageUploaderHandler, $imageUploaderInput, id;
        if ($(this).hasClass("done")) {
          return false;
        }
        id = $(this).find("input").attr("id");
        $imageUploaderInput = $(".image-uploader-input");
        $imageUploaderHandler = $(this);
        $(".image-uploader-form").find("[name='id']").val(id);
        $imageUploaderInput.click();
        $imageUploaderInput.off("change");
        return $imageUploaderInput.on("change", function(e) {
          var formData;
          if (!$(this).val()) {
            return false;
          }
          formData = new FormData($(".image-uploader-form").get(0));
          return $.ajax({
            url: "/upload",
            type: "POST",
            xhr: function() {
              var xhr;
              xhr = $.ajaxSettings.xhr();
              if (xhr.upload) {
                xhr.upload.addEventListener("progress", function(e) {
                  var width;
                  width = "" + Math.round(e.loaded / e.total * 100) + "%";
                  return $imageUploaderHandler.find(".image-progress-inner").width(width);
                }, false);
              }
              return xhr;
            },
            data: formData,
            error: function() {},
            success: function(result) {
              var n, path;
              if (result.error) {
                console.log("Failed to upload", result.error, result.message);
                $imageUploaderHandler.removeClass("pending");
                return false;
              }
              path = result.path;
              $imageUploaderHandler.parents("figure").find("img").attr("src", path);
              $imageUploaderHandler.find(".image-progress-inner").width(0);
              n = $(".image-uploader-handler").index($imageUploaderHandler);
              self.getNthImageSelection(n, path);
              return window.setTimeout(function() {
                return $(".image-uploader-handler").eq(n).addClass("done").parent().find("img").addClass("done");
              }, 10);
            },
            cache: false,
            processData: false,
            contentType: false,
            beforeSend: function() {
              return $imageUploaderHandler.addClass("pending");
            }
          });
        });
      });
    };

    MarkdownEditor.prototype.formatBlock = function(type, start_charts, end_chars) {
      var cm, end, endPoint, start, startPoint, stat, text;
      end_chars = typeof end_chars === "undefined" ? start_charts : end_chars;
      cm = this.cm;
      stat = this.getState();
      start = start_charts;
      end = end_chars;
      startPoint = cm.getCursor('start');
      endPoint = cm.getCursor('end');
      if (stat[type]) {
        text = cm.getLine(startPoint.line);
        start = text.slice(0, startPoint.ch);
        end = text.slice(startPoint.ch);
        if (type === "bold") {
          start = start.replace(/(\*\*|__)(?![\s\S]*(\*\*|__))/, "");
          end = end.replace(/(\*\*|__)/, "");
        } else if (type === "italic") {
          start = start.replace(/(\*|_)(?![\s\S]*(\*|_))/, "");
          end = end.replace(/(\*|_)/, "");
        } else if (type === "strikethrough") {
          start = start.replace(/(\*\*|~~)(?![\s\S]*(\*\*|~~))/, "");
          end = end.replace(/(\*\*|~~)/, "");
        }
        cm.replaceRange(start + end, {
          line: startPoint.line,
          ch: 0
        }, {
          line: startPoint.line,
          ch: 999999999999999
        });
        if (type === "bold" || type === "strikethrough") {
          startPoint.ch -= 2;
          if (startPoint !== endPoint) {
            endPoint.ch -= 2;
          }
        } else if (type === "italic") {
          startPoint.ch -= 1;
          if (startPoint !== endPoint) {
            endPoint.ch -= 1;
          }
        }
      } else {
        text = cm.getSelection();
        if (type === "bold") {
          text = text.split("**").join("");
          text = text.split("__").join("");
        } else if (type === "italic") {
          text = text.split("*").join("");
          text = text.split("_").join("");
        } else if (type === "strikethrough") {
          text = text.split("~~").join("");
        }
        cm.replaceSelection(start + text + end);
        startPoint.ch += start_charts.length;
        endPoint.ch = startPoint.ch + text.length;
      }
      cm.setSelection(startPoint, endPoint);
      return cm.focus();
    };

    MarkdownEditor.prototype.formatLine = function(name) {
      var cm, endPoint, i, map, repl, startPoint, stat, _fn, _i, _ref, _ref1;
      cm = this.cm;
      stat = this.getState();
      startPoint = cm.getCursor("start");
      endPoint = cm.getCursor("end");
      repl = {
        'quote': /^(\s*)\>\s+/,
        'unordered-list': /^(\s*)(\*|\-|\+)\s+/,
        'ordered-list': /^(\s*)\d+\.\s+/
      };
      map = {
        'quote': '> ',
        'unordered-list': '* ',
        'ordered-list': '1. '
      };
      _fn = function(i) {
        var text;
        text = cm.getLine(i);
        if (stat[name]) {
          text = text.replace(repl[name], "$1");
        } else {
          text = map[name] + text;
        }
        return cm.replaceRange(text, {
          line: i,
          ch: 0
        }, {
          line: i,
          ch: 9999999999
        });
      };
      for (i = _i = _ref = startPoint.line, _ref1 = endPoint.line; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        _fn(i);
      }
      return cm.focus();
    };

    MarkdownEditor.prototype.formatHeading = function(direction, size) {
      var cm, endPoint, i, startPoint, _i, _ref, _ref1, _results;
      cm = this.cm;
      startPoint = cm.getCursor("start");
      endPoint = cm.getCursor("end");
      _results = [];
      for (i = _i = _ref = startPoint.line, _ref1 = endPoint.line; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        _results.push((function(i) {
          var currHeadingLevel, text;
          text = cm.getLine(i);
          currHeadingLevel = text.search(/[^#]/);
          if (direction !== void 0) {
            if (currHeadingLevel <= 0) {
              if (direction === "bigger") {
                text = "######" + text;
              } else {
                text = "#" + text;
              }
            } else if (currHeadingLevel === 6 && direction === "smaller") {
              text = text.substr(7);
            } else if (currHeadingLevel === 1 && direction === "bigger") {
              text = text.substr(2);
            } else {
              if (direction === "bigger") {
                text = text.substr(1);
              } else {
                text = "#" + text;
              }
            }
          } else {
            if (size > 6) {
              return false;
            }
            if (currHeadingLevel <= 0) {
              text = Array(size + 1).join("#") + " " + text;
            } else if (currHeadingLevel === size) {
              text = text.substr(currHeadingLevel + 1);
            } else {
              text = Array(size + 1).join("#") + " " + text.substr(currHeadingLevel + 1);
            }
          }
          return cm.replaceRange(text, {
            line: i,
            ch: 0
          }, {
            line: i,
            ch: 99999999999999
          });
        })(i));
      }
      return _results;
    };

    MarkdownEditor.prototype.replaceSection = function(active, start, end) {
      var cm, endPoint, startPoint, text;
      cm = this.cm;
      startPoint = cm.getCursor("start");
      endPoint = cm.getCursor("end");
      if (active) {
        text = cm.getLine(startPoint.line);
        start = text.slice(0, startPoint.ch);
        end = text.slice(startPoint.ch);
        cm.replaceRange(start + end, {
          line: startPoint.line,
          ch: 0
        });
      } else {
        text = cm.getSelection();
        cm.replaceSelection(start + text + end);
        startPoint.ch += start.length;
        if (startPoint !== endPoint) {
          endPoint.ch += start.length;
        }
      }
      cm.setSelection(startPoint, endPoint);
      return cm.focus();
    };

    MarkdownEditor.prototype.undo = function() {
      this.cm.undo();
      return this.cm.focus();
    };

    MarkdownEditor.prototype.redo = function() {
      this.cm.redo();
      return this.cm.focus();
    };

    MarkdownEditor.prototype.action_hr = function() {
      var stat;
      stat = this.getState();
      return this.replaceSection(stat.image, "", '\n\n-----\n\n');
    };

    MarkdownEditor.prototype.action_image = function() {
      var stat;
      stat = this.getState();
      return this.replaceSection(stat.image, '![](http://', ')');
    };

    MarkdownEditor.prototype.action_link = function() {
      var stat;
      stat = this.getState();
      return this.replaceSection(stat.link, '[', '](http://)');
    };

    MarkdownEditor.prototype.action_orderedList = function() {
      return this.formatLine('ordered-list');
    };

    MarkdownEditor.prototype.action_unorderedList = function() {
      return this.formatLine("unordered-list");
    };

    MarkdownEditor.prototype.action_h1 = function() {
      return this.formatHeading(void 0, 1);
    };

    MarkdownEditor.prototype.action_h2 = function() {
      return this.formatHeading(void 0, 2);
    };

    MarkdownEditor.prototype.action_h3 = function() {
      return this.formatHeading(void 0, 3);
    };

    MarkdownEditor.prototype.action_h4 = function() {
      return this.formatHeading(void 0, 4);
    };

    MarkdownEditor.prototype.action_h5 = function() {
      return this.formatHeading(void 0, 5);
    };

    MarkdownEditor.prototype.action_h6 = function() {
      return this.formatHeading(void 0, 6);
    };

    MarkdownEditor.prototype.action_headerBigger = function() {
      return this.formatHeading("bigger");
    };

    MarkdownEditor.prototype.action_headerSmaller = function() {
      return this.formatHeading("smaller");
    };

    MarkdownEditor.prototype.action_quote = function() {
      return this.formatLine("quote");
    };

    MarkdownEditor.prototype.action_code = function() {
      return this.formatBlock("code", '```\r\n', '\r\n```');
    };

    MarkdownEditor.prototype.action_strikethrough = function() {
      return this.formatBlock('strikethrough', '~~');
    };

    MarkdownEditor.prototype.action_italic = function() {
      return this.formatBlock("italic", "*");
    };

    MarkdownEditor.prototype.action_bold = function() {
      return this.formatBlock("bold", "**");
    };

    MarkdownEditor.prototype.action_table = function(axb) {
      var a, b, br, endText, line, lineHead, startText, _ref;
      _ref = axb.split("x"), a = _ref[0], b = _ref[1];
      line = Array(+a + 1).join("\|\ \ \ ") + "\|";
      lineHead = Array(+a + 1).join("\|\-\-\-") + "\|";
      br = "\n";
      startText = "\n\|";
      endText = line.slice(1) + br + lineHead + br + Array(+b + 1).join(line + br);
      return this.formatBlock("table", startText, endText);
    };

    MarkdownEditor.prototype.action_preview = function() {
      this.editorWrapper.removeClass("split").toggleClass("preview");
      return this.cm.refresh();
    };

    MarkdownEditor.prototype.action_split = function() {
      var isSplit;
      isSplit = !this.editorWrapper.hasClass("split");
      this.editorWrapper.toggleClass("split", isSplit).toggleClass("preview", isSplit);
      return this.cm.refresh();
    };

    MarkdownEditor.prototype.getState = function(pos) {
      var data, ret, stat, text, types, _i, _len;
      pos = pos || this.cm.getCursor("start");
      stat = this.cm.getTokenAt(pos);
      if (!stat.type) {
        return {};
      }
      types = stat.type.split(" ");
      ret = {};
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        data = types[_i];
        if (data === "strong") {
          ret.bold = true;
        } else if (data === "variable-2") {
          text = this.cm.getLine(pos.line);
          if (/^\s*\d+\.\s/.test(text)) {
            ret['ordered-list'] = true;
          } else {
            ret['unordered-list'] = true;
          }
        } else if (data === "atom") {
          ret.quote = true;
        } else if (data === "em") {
          ret.italic = true;
        } else if (data === "quote") {
          ret.quote = true;
        } else if (data === "strikethrough") {
          ret.strikethrough = true;
        } else if (data === "comment") {
          ret.code = true;
        }
      }
      return ret;
    };

    MarkdownEditor.prototype.renderPreview = function() {
      var self, text;
      self = this;
      text = this.cm.getValue();
      if (window.marked) {
        window.marked.setOptions({
          gfm: true
        });
        return window.marked(text, {
          renderer: self.uploadRenderer
        }, function(err, content) {
          var pureValue;
          if (err) {
            return console.log(err);
          }
          self.preview.html(content);
          pureValue = $("<div>").html(content).find(".image-uploader-handler").remove().end().find(".image-uploader").removeClass("image-uploader").addClass("figure-wrapper").end().html();
          self.editorWrapper.find(".html-value").val(pureValue);
          return self.highlight();
        });
      }
    };

    MarkdownEditor.prototype.highlight = function() {
      $(".content-preview").find("pre code").parent().each(function() {
        return $(this).addClass("prettyprint linenums");
      });
      return prettyPrint();
    };

    MarkdownEditor.prototype.syncScroll = function() {
      var $html, $text, self;
      $text = $(".CodeMirror-scroll");
      $html = $(".content-preview");
      self = this;
      return $text.scroll(function() {
        var htmlHeight, scrollTop, textHeight, top, winHeight;
        top = $text.scrollTop();
        winHeight = $text.height();
        textHeight = $(".CodeMirror-sizer").height();
        htmlHeight = self.editorWrapper.find(".content-preview").get(0).scrollHeight;
        scrollTop = top * (htmlHeight - winHeight) / (textHeight - winHeight);
        return $html.scrollTop(scrollTop);
      });
    };

    return MarkdownEditor;

  })();

  window.MarkdownEditor = MarkdownEditor;

}).call(this);
